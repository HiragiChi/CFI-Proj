commit 5b0a6acc73fcac5f7d17badd09275bf7b9b46603
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Jun 30 21:54:04 2021 +0100

    io_uring: simplify task_work func
    
    Since we don't really use req->task_work anymore, get rid of it together
    with the nasty ->func aliasing between ->io_task_work and ->task_work,
    and hide ->fallback_node inside of io_task_work.
    
    Also, as task_work is gone now, replace the callback type from
    task_work_func_t to a function taking io_kiocb to avoid casting and
    simplify code.
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 7072a355ba191c08b0579f0f66e3eba0e28bf818
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed May 5 00:33:24 2021 -0700

    netfilter: nfnetlink: add a missing rcu_read_unlock()
    
    Reported by syzbot :
    BUG: sleeping function called from invalid context at include/linux/sched/mm.h:201
    in_atomic(): 0, irqs_disabled(): 0, non_block: 0, pid: 26899, name: syz-executor.5
    1 lock held by syz-executor.5/26899:
     #0: ffffffff8bf797a0 (rcu_read_lock){....}-{1:2}, at: nfnetlink_get_subsys net/netfilter/nfnetlink.c:148 [inline]
     #0: ffffffff8bf797a0 (rcu_read_lock){....}-{1:2}, at: nfnetlink_rcv_msg+0x1da/0x1300 net/netfilter/nfnetlink.c:226
    Preemption disabled at:
    [<ffffffff8917799e>] preempt_schedule_irq+0x3e/0x90 kernel/sched/core.c:5533
    CPU: 1 PID: 26899 Comm: syz-executor.5 Not tainted 5.12.0-next-20210504-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x141/0x1d7 lib/dump_stack.c:120
     ___might_sleep.cold+0x1f1/0x237 kernel/sched/core.c:8338
     might_alloc include/linux/sched/mm.h:201 [inline]
     slab_pre_alloc_hook mm/slab.h:500 [inline]
     slab_alloc_node mm/slub.c:2845 [inline]
     kmem_cache_alloc_node+0x33d/0x3e0 mm/slub.c:2960
     __alloc_skb+0x20b/0x340 net/core/skbuff.c:413
     alloc_skb include/linux/skbuff.h:1107 [inline]
     nlmsg_new include/net/netlink.h:953 [inline]
     netlink_ack+0x1ed/0xaa0 net/netlink/af_netlink.c:2437
     netlink_rcv_skb+0x33d/0x420 net/netlink/af_netlink.c:2508
     nfnetlink_rcv+0x1ac/0x420 net/netfilter/nfnetlink.c:650
     netlink_unicast_kernel net/netlink/af_netlink.c:1312 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1338
     netlink_sendmsg+0x856/0xd90 net/netlink/af_netlink.c:1927
     sock_sendmsg_nosec net/socket.c:654 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:674
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2350
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2404
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2433
     do_syscall_64+0x3a/0xb0 arch/x86/entry/common.c:47
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x4665f9
    Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fa8a03ee188 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 000000000056bf60 RCX: 00000000004665f9
    RDX: 0000000000000000 RSI: 0000000020000480 RDI: 0000000000000004
    RBP: 00000000004bfce1 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 000000000056bf60
    R13: 00007fffe864480f R14: 00007fa8a03ee300 R15: 0000000000022000
    
    ================================================
    WARNING: lock held when returning to user space!
    5.12.0-next-20210504-syzkaller #0 Tainted: G        W
    ------------------------------------------------
    syz-executor.5/26899 is leaving the kernel with locks still held!
    1 lock held by syz-executor.5/26899:
     #0: ffffffff8bf797a0 (rcu_read_lock){....}-{1:2}, at: nfnetlink_get_subsys net/netfilter/nfnetlink.c:148 [inline]
     #0: ffffffff8bf797a0 (rcu_read_lock){....}-{1:2}, at: nfnetlink_rcv_msg+0x1da/0x1300 net/netfilter/nfnetlink.c:226
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 26899 at kernel/rcu/tree_plugin.h:359 rcu_note_context_switch+0xfd/0x16e0 kernel/rcu/tree_plugin.h:359
    Modules linked in:
    CPU: 0 PID: 26899 Comm: syz-executor.5 Tainted: G        W         5.12.0-next-20210504-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:rcu_note_context_switch+0xfd/0x16e0 kernel/rcu/tree_plugin.h:359
    Code: 48 89 fa 48 c1 ea 03 0f b6 14 02 48 89 f8 83 e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85 2e 0d 00 00 8b bd cc 03 00 00 85 ff 7e 02 <0f> 0b 65 48 8b 2c 25 00 f0 01 00 48 8d bd cc 03 00 00 48 b8 00 00
    RSP: 0000:ffffc90002fffdb0 EFLAGS: 00010002
    RAX: 0000000000000007 RBX: ffff8880b9c36080 RCX: ffffffff8dc99bac
    RDX: 0000000000000000 RSI: 0000000000000008 RDI: 0000000000000001
    RBP: ffff88808b9d1c80 R08: 0000000000000000 R09: ffffffff8dc96917
    R10: fffffbfff1b92d22 R11: 0000000000000000 R12: 0000000000000000
    R13: ffff88808b9d1c80 R14: ffff88808b9d1c80 R15: ffffc90002ff8000
    FS:  00007fa8a03ee700(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f09896ed000 CR3: 0000000032070000 CR4: 00000000001526f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     __schedule+0x214/0x23e0 kernel/sched/core.c:5044
     schedule+0xcf/0x270 kernel/sched/core.c:5226
     exit_to_user_mode_loop kernel/entry/common.c:162 [inline]
     exit_to_user_mode_prepare+0x13e/0x280 kernel/entry/common.c:208
     irqentry_exit_to_user_mode+0x5/0x40 kernel/entry/common.c:314
     asm_sysvec_reschedule_ipi+0x12/0x20 arch/x86/include/asm/idtentry.h:637
    RIP: 0033:0x4665f9
    
    Fixes: 50f2db9e368f ("netfilter: nfnetlink: consolidate callback types")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 50f2db9e368f73ecbbaa92da365183fa953aaba7
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Apr 23 00:17:12 2021 +0200

    netfilter: nfnetlink: consolidate callback types
    
    Add enum nfnl_callback_type to identify the callback type to provide one
    single callback.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 35b7c87c18082c01e0179ba2fde10b6494f0acb5
Merge: c3900329b53f fc235fcb0f7c
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Wed Feb 24 14:59:18 2021 -0600

    Merge branch 'pci/hotplug'
    
    - Remove unused acpiphp_callback typedef (Chen Lin)
    
    * pci/hotplug:
      PCI: acpiphp: Remove unused acpiphp_callback typedef

commit fc235fcb0f7c1865ccb2d1f50267eef299a4f3fb
Author: Chen Lin <chen.lin5@zte.com.cn>
Date:   Tue Feb 16 10:38:40 2021 +0800

    PCI: acpiphp: Remove unused acpiphp_callback typedef
    
    Remove the 'acpiphp_callback' typedef as it is not used.
    
    Link: https://lore.kernel.org/r/1613443120-4279-1-git-send-email-chen45464546@163.com
    Signed-off-by: Chen Lin <chen.lin5@zte.com.cn>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Krzysztof Wilczy≈Ñski <kw@linux.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit f575f2bdb6c3c7a8debffd8df1f355656f59a9c0
Author: Lyude Paul <lyude@redhat.com>
Date:   Fri Nov 13 19:14:11 2020 -0500

    drm/nouveau/kms/nv50-: Remove (nv_encoder->crtc) checks in ->disable callbacks
    
    Noticed these in both the disable (which we'll be getting rid of in a
    moment) and the atomic disable callbacks: both callback types check whether
    or not there's actually a CRTC assigned to the given encoder. However, as
    ->atomic_disable and ->disable will never be called without a CRTC assigned
    to the given encoder there's no point in this check. So just remove it.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 32fc4a9ad56f8260025ac766548d625509cc879f
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Tue Nov 17 12:59:02 2020 -0800

    cfg80211: fix callback type mismatches in wext-compat
    
    Instead of casting callback functions to type iw_handler, which trips
    indirect call checking with Clang's Control-Flow Integrity (CFI), add
    stub functions with the correct function type for the callbacks.
    
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20201117205902.405316-1-samitolvanen@google.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit ebd19fc372e3e78bf165f230e7c084e304441c08
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Fri Nov 13 10:31:26 2020 -0800

    perf/x86: fix sysfs type mismatches
    
    This change switches rapl to use PMU_FORMAT_ATTR, and fixes two other
    macros to use device_attribute instead of kobj_attribute to avoid
    callback type mismatches that trip indirect call checking with Clang's
    Control-Flow Integrity (CFI).
    
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lkml.kernel.org/r/20201113183126.1239404-1-samitolvanen@google.com

commit 382625d0d4325fb14a29444eb8dce8dcc2eb9b51
Merge: 99f6cf61f175 d958e343bdc3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 3 11:57:03 2020 -0700

    Merge tag 'for-5.9/block-20200802' of git://git.kernel.dk/linux-block
    
    Pull core block updates from Jens Axboe:
     "Good amount of cleanups and tech debt removals in here, and as a
      result, the diffstat shows a nice net reduction in code.
    
       - Softirq completion cleanups (Christoph)
    
       - Stop using ->queuedata (Christoph)
    
       - Cleanup bd claiming (Christoph)
    
       - Use check_events, moving away from the legacy media change
         (Christoph)
    
       - Use inode i_blkbits consistently (Christoph)
    
       - Remove old unused writeback congestion bits (Christoph)
    
       - Cleanup/unify submission path (Christoph)
    
       - Use bio_uninit consistently, instead of bio_disassociate_blkg
         (Christoph)
    
       - sbitmap cleared bits handling (John)
    
       - Request merging blktrace event addition (Jan)
    
       - sysfs add/remove race fixes (Luis)
    
       - blk-mq tag fixes/optimizations (Ming)
    
       - Duplicate words in comments (Randy)
    
       - Flush deferral cleanup (Yufen)
    
       - IO context locking/retry fixes (John)
    
       - struct_size() usage (Gustavo)
    
       - blk-iocost fixes (Chengming)
    
       - blk-cgroup IO stats fixes (Boris)
    
       - Various little fixes"
    
    * tag 'for-5.9/block-20200802' of git://git.kernel.dk/linux-block: (135 commits)
      block: blk-timeout: delete duplicated word
      block: blk-mq-sched: delete duplicated word
      block: blk-mq: delete duplicated word
      block: genhd: delete duplicated words
      block: elevator: delete duplicated word and fix typos
      block: bio: delete duplicated words
      block: bfq-iosched: fix duplicated word
      iocost_monitor: start from the oldest usage index
      iocost: Fix check condition of iocg abs_vdebt
      block: Remove callback typedefs for blk_mq_ops
      block: Use non _rcu version of list functions for tag_set_list
      blk-cgroup: show global disk stats in root cgroup io.stat
      blk-cgroup: make iostat functions visible to stat printing
      block: improve discard bio alignment in __blkdev_issue_discard()
      block: change REQ_OP_ZONE_RESET and REQ_OP_ZONE_RESET_ALL to be odd numbers
      block: defer flush request no matter whether we have elevator
      block: make blk_timeout_init() static
      block: remove retry loop in ioc_release_fn()
      block: remove unnecessary ioc nested locking
      block: integrate bd_start_claiming into __blkdev_get
      ...

commit b13fecb1c3a603c4b8e99b306fecf4f668c11b32
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Jul 13 15:01:26 2020 -0700

    treewide: Replace DECLARE_TASKLET() with DECLARE_TASKLET_OLD()
    
    This converts all the existing DECLARE_TASKLET() (and ...DISABLED)
    macros with DECLARE_TASKLET_OLD() in preparation for refactoring the
    tasklet callback type. All existing DECLARE_TASKLET() users had a "0"
    data argument, it has been removed here as well.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Kees Cook <keescook@chromium.org>

commit 0516c2f6ae6570a0c4a081189d71a48cfadc34a7
Author: Daniel Wagner <dwagner@suse.de>
Date:   Tue Jul 28 18:20:36 2020 +0200

    block: Remove callback typedefs for blk_mq_ops
    
    No need to define typedefs for the callbacks, because there is not a
    single user except blk_mq_ops.
    
    Signed-off-by: Daniel Wagner <dwagner@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit d61fe22c2ae42d9fd76c34ef4224064cca4b04b0
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Dec 23 18:33:47 2019 +0900

    ALSA: ctl: allow TLV read operation for callback type of element in locked case
    
    A design of ALSA control core allows applications to execute three
    operations for TLV feature; read, write and command. Furthermore, it
    allows driver developers to process the operations by two ways; allocated
    array or callback function. In the former, read operation is just allowed,
    thus developers uses the latter when device driver supports variety of
    models or the target model is expected to dynamically change information
    stored in TLV container.
    
    The core also allows applications to lock any element so that the other
    applications can't perform write operation to the element for element
    value and TLV information. When the element is locked, write and command
    operation for TLV information are prohibited as well as element value.
    Any read operation should be allowed in the case.
    
    At present, when an element has callback function for TLV information,
    TLV read operation returns EPERM if the element is locked. On the
    other hand, the read operation is success when an element has allocated
    array for TLV information. In both cases, read operation is success for
    element value expectedly.
    
    This commit fixes the bug. This change can be backported to v4.14
    kernel or later.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20191223093347.15279-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 7da538c1e154635e1f84b2fc41e482680e770844
Merge: f8fc57e8d7c5 7acd9378dc65
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Dec 9 14:03:33 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/pablo/nf
    
    Pablo Neira Ayuso says:
    
    ====================
    Netfilter fixes for net
    
    The following patchset contains Netfilter fixes for net:
    
    1) Wait for rcu grace period after releasing netns in ctnetlink,
       from Florian Westphal.
    
    2) Incorrect command type in flowtable offload ndo invocation,
       from wenxu.
    
    3) Incorrect callback type in flowtable offload flow tuple
       updates, also from wenxu.
    
    4) Fix compile warning on flowtable offload infrastructure due to
       possible reference to uninitialized variable, from Nathan Chancellor.
    
    5) Do not inline nf_ct_resolve_clash(), this is called from slow
       path / stress situations. From Florian Westphal.
    
    6) Missing IPv6 flow selector description in flowtable offload.
    
    7) Missing check for NETDEV_UNREGISTER in nf_tables offload
       infrastructure, from wenxu.
    
    8) Update NAT selftest to use randomized netns names, from
       Florian Westphal.
    
    9) Restore nfqueue bridge support, from Marco Oliverio.
    
    10) Compilation warning in SCTP_CHUNKMAP_*() on xt_sctp header.
        From Phil Sutter.
    
    11) Fix bogus lookup/get match for non-anonymous rbtree sets.
    
    12) Missing netlink validation for NFT_SET_ELEM_INTERVAL_END
        elements.
    
    13) Missing netlink validation for NFT_DATA_VALUE after
        nft_data_init().
    
    14) If rule specifies no actions, offload infrastructure returns
        EOPNOTSUPP.
    
    15) Module refcount leak in object updates.
    
    16) Missing sanitization for ARP traffic from br_netfilter, from
        Eric Dumazet.
    
    17) Compilation breakage on big-endian due to incorrect memcpy()
        size in the flowtable offload infrastructure.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9a3d7fd275be4559277667228902824165153c80
Merge: 0dd09bc02c1b 0e4a459f56c3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 27 11:06:20 2019 -0800

    Merge tag 'driver-core-5.5-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core
    
    Pull driver core updates from Greg KH:
     "Here is the "big" set of driver core patches for 5.5-rc1
    
      There's a few minor cleanups and fixes in here, but the majority of
      the patches in here fall into two buckets:
    
       - debugfs api cleanups and fixes
    
       - driver core device link support for boot dependancy issues
    
      The debugfs api cleanups are working to slowly refactor the debugfs
      apis so that it is even harder to use incorrectly. That work has been
      happening for the past few kernel releases and will continue over
      time, it's a long-term project/goal
    
      The driver core device link support missed 5.4 by just a bit, so it's
      been sitting and baking for many months now. It's from Saravana Kannan
      to help resolve the problems that DT-based systems have at boot time
      with dependancy graphs and kernel modules. Turns out that no one has
      actually tried to build a generic arm64 kernel with loads of modules
      and have it "just work" for a variety of platforms (like a distro
      kernel). The big problem turned out to be a lack of dependency
      information between different areas of DT entries, and the work here
      resolves that problem and now allows devices to boot properly, and
      quicker than a monolith kernel.
    
      All of these patches have been in linux-next for a long time with no
      reported issues"
    
    * tag 'driver-core-5.5-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core: (68 commits)
      tracing: Remove unnecessary DEBUG_FS dependency
      of: property: Add device link support for interrupt-parent, dmas and -gpio(s)
      debugfs: Fix !DEBUG_FS debugfs_create_automount
      of: property: Add device link support for "iommu-map"
      of: property: Fix the semantics of of_is_ancestor_of()
      i2c: of: Populate fwnode in of_i2c_get_board_info()
      drivers: base: Fix Kconfig indentation
      firmware_loader: Fix labels with comma for builtin firmware
      driver core: Allow device link operations inside sync_state()
      driver core: platform: Declare ret variable only once
      cpu-topology: declare parse_acpi_topology in <linux/arch_topology.h>
      crypto: hisilicon: no need to check return value of debugfs_create functions
      driver core: platform: use the correct callback type for bus_find_device
      firmware_class: make firmware caching configurable
      driver core: Clarify documentation for fwnode_operations.add_links()
      mailbox: tegra: Fix superfluous IRQ error message
      net: caif: Fix debugfs on 64-bit platforms
      mac80211: Use debugfs_create_xul() helper
      media: c8sectpfe: no need to check return value of debugfs_create functions
      of: property: Add device link support for iommus, mboxes and io-channels
      ...

commit 492c88720d36eb662f9f10c1633f7726fbb07fc4
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Tue Nov 12 13:41:56 2019 -0800

    driver core: platform: use the correct callback type for bus_find_device
    
    platform_find_device_by_driver calls bus_find_device and passes
    platform_match as the callback function. Casting the function to a
    mismatching type trips indirect call Control-Flow Integrity (CFI) checking.
    
    This change adds a callback function with the correct type and instead
    of casting the function, explicitly casts the second parameter to struct
    device_driver* as expected by platform_match.
    
    Fixes: 36f3313d6bff9 ("platform: Add platform_find_device_by_driver() helper")
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191112214156.3430-1-samitolvanen@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0320d1e7a3819dd81c9b2892f0ce6fd82b453bdf
Merge: 4717b05328ba c29f74e0df7a
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Nov 12 19:42:27 2019 -0800

    Merge branch 'netfilter-flowtable-hardware-offload'
    
    Pablo Neira Ayuso says:
    
    ====================
    netfilter flowtable hardware offload
    
    The following patchset adds hardware offload support for the flowtable
    infrastructure [1]. This infrastructure provides a fast datapath for
    the classic Linux forwarding path that users can enable through policy,
    eg.
    
     table inet x {
          flowtable f {
                   hook ingress priority 10 devices = { eth0, eth1 }
                   flags offload
          }
          chain y {
                   type filter hook forward priority 0; policy accept;
                   ip protocol tcp flow offload @f
          }
     }
    
    This example above enables the fastpath for TCP traffic between devices
    eth0 and eth1. Users can turn on the hardware offload through the
    'offload' flag from the flowtable definition. If this new flag is not
    specified, the software flowtable datapath is used.
    
    This patchset is composed of 4 preparation patches:
    
       room to extend this infrastructure, eg. accelerate bridge forwarding.
    
    And 2 patches to add the hardware offload control and data planes:
    
       hardware offload. This includes a new NFTA_FLOWTABLE_FLAGS netlink
       attribute to convey the optional NF_FLOWTABLE_HW_OFFLOAD flag.
       API available at net/core/flow_offload.h to represent the flow
       through two flow_rule objects to configure an exact 5-tuple matching
       on each direction plus the corresponding forwarding actions, that is,
       the MAC address, NAT and checksum updates; and port redirection in
       order to configure the hardware datapath. This patch only supports
       for IPv4 support and statistics collection for flow aging as an initial
       step.
    
    This patchset introduces a new flow_block callback type that needs to be
    set up to configure the flowtable hardware offload.
    
    The first client of this infrastructure follows up after this batch.
    I would like to thank Mellanox for developing the first upstream driver
    to use this infrastructure.
    
    [1] Documentation/networking/nf_flowtable.txt
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ef8f3d48afd6a17a0dae8c277c2f539c2f19fd16
Merge: d7d170a8e357 2c207985f354
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 12 11:40:28 2019 -0700

    Merge branch 'akpm' (patches from Andrew)
    
    Merge updates from Andrew Morton:
     "Am experimenting with splitting MM up into identifiable subsystems
      perhaps with a view to gitifying it in complex ways. Also with more
      verbose "incoming" emails.
    
      Most of MM is here and a few other trees.
    
      Subsystems affected by this patch series:
       - hotfixes
       - iommu
       - scripts
       - arch/sh
       - ocfs2
       - mm:slab-generic
       - mm:slub
       - mm:kmemleak
       - mm:kasan
       - mm:cleanups
       - mm:debug
       - mm:pagecache
       - mm:swap
       - mm:memcg
       - mm:gup
       - mm:pagemap
       - mm:infrastructure
       - mm:vmalloc
       - mm:initialization
       - mm:pagealloc
       - mm:vmscan
       - mm:tools
       - mm:proc
       - mm:ras
       - mm:oom-kill
    
      hotfixes:
          mm: vmscan: scan anonymous pages on file refaults
          mm/nvdimm: add is_ioremap_addr and use that to check ioremap address
          mm/memcontrol: fix wrong statistics in memory.stat
          mm/z3fold.c: lock z3fold page before  __SetPageMovable()
          nilfs2: do not use unexported cpu_to_le32()/le32_to_cpu() in uapi header
          MAINTAINERS: nilfs2: update email address
    
      iommu:
          include/linux/dmar.h: replace single-char identifiers in macros
    
      scripts:
          scripts/decode_stacktrace: match basepath using shell prefix operator, not regex
          scripts/decode_stacktrace: look for modules with .ko.debug extension
          scripts/spelling.txt: drop "sepc" from the misspelling list
          scripts/spelling.txt: add spelling fix for prohibited
          scripts/decode_stacktrace: Accept dash/underscore in modules
          scripts/spelling.txt: add more spellings to spelling.txt
    
      arch/sh:
          arch/sh/configs/sdk7786_defconfig: remove CONFIG_LOGFS
          sh: config: remove left-over BACKLIGHT_LCD_SUPPORT
          sh: prevent warnings when using iounmap
    
      ocfs2:
          fs: ocfs: fix spelling mistake "hearbeating" -> "heartbeat"
          ocfs2/dlm: use struct_size() helper
          ocfs2: add last unlock times in locking_state
          ocfs2: add locking filter debugfs file
          ocfs2: add first lock wait time in locking_state
          ocfs: no need to check return value of debugfs_create functions
          fs/ocfs2/dlmglue.c: unneeded variable: "status"
          ocfs2: use kmemdup rather than duplicating its implementation
    
      mm:slab-generic:
        Patch series "mm/slab: Improved sanity checking":
          mm/slab: validate cache membership under freelist hardening
          mm/slab: sanity-check page type when looking up cache
          lkdtm/heap: add tests for freelist hardening
    
      mm:slub:
          mm/slub.c: avoid double string traverse in kmem_cache_flags()
          slub: don't panic for memcg kmem cache creation failure
    
      mm:kmemleak:
          mm/kmemleak.c: fix check for softirq context
          mm/kmemleak.c: change error at _write when kmemleak is disabled
          docs: kmemleak: add more documentation details
    
      mm:kasan:
          mm/kasan: print frame description for stack bugs
          Patch series "Bitops instrumentation for KASAN", v5:
            lib/test_kasan: add bitops tests
            x86: use static_cpu_has in uaccess region to avoid instrumentation
            asm-generic, x86: add bitops instrumentation for KASAN
          Patch series "mm/kasan: Add object validation in ksize()", v3:
            mm/kasan: introduce __kasan_check_{read,write}
            mm/kasan: change kasan_check_{read,write} to return boolean
            lib/test_kasan: Add test for double-kzfree detection
            mm/slab: refactor common ksize KASAN logic into slab_common.c
            mm/kasan: add object validation in ksize()
    
      mm:cleanups:
          include/linux/pfn_t.h: remove pfn_t_to_virt()
          Patch series "remove ARCH_SELECT_MEMORY_MODEL where it has no effect":
            arm: remove ARCH_SELECT_MEMORY_MODEL
            s390: remove ARCH_SELECT_MEMORY_MODEL
            sparc: remove ARCH_SELECT_MEMORY_MODEL
          mm/gup.c: make follow_page_mask() static
          mm/memory.c: trivial clean up in insert_page()
          mm: make !CONFIG_HUGE_PAGE wrappers into static inlines
          include/linux/mm_types.h: ifdef struct vm_area_struct::swap_readahead_info
          mm: remove the account_page_dirtied export
          mm/page_isolation.c: change the prototype of undo_isolate_page_range()
          include/linux/vmpressure.h: use spinlock_t instead of struct spinlock
          mm: remove the exporting of totalram_pages
          include/linux/pagemap.h: document trylock_page() return value
    
      mm:debug:
          mm/failslab.c: by default, do not fail allocations with direct reclaim only
          Patch series "debug_pagealloc improvements":
            mm, debug_pagelloc: use static keys to enable debugging
            mm, page_alloc: more extensive free page checking with debug_pagealloc
            mm, debug_pagealloc: use a page type instead of page_ext flag
    
      mm:pagecache:
          Patch series "fix filler_t callback type mismatches", v2:
            mm/filemap.c: fix an overly long line in read_cache_page
            mm/filemap: don't cast ->readpage to filler_t for do_read_cache_page
            jffs2: pass the correct prototype to read_cache_page
            9p: pass the correct prototype to read_cache_page
          mm/filemap.c: correct the comment about VM_FAULT_RETRY
    
      mm:swap:
          mm, swap: fix race between swapoff and some swap operations
          mm/swap_state.c: simplify total_swapcache_pages() with get_swap_device()
          mm, swap: use rbtree for swap_extent
          mm/mincore.c: fix race between swapoff and mincore
    
      mm:memcg:
          memcg, oom: no oom-kill for __GFP_RETRY_MAYFAIL
          memcg, fsnotify: no oom-kill for remote memcg charging
          mm, memcg: introduce memory.events.local
          mm: memcontrol: dump memory.stat during cgroup OOM
          Patch series "mm: reparent slab memory on cgroup removal", v7:
            mm: memcg/slab: postpone kmem_cache memcg pointer initialization to memcg_link_cache()
            mm: memcg/slab: rename slab delayed deactivation functions and fields
            mm: memcg/slab: generalize postponed non-root kmem_cache deactivation
            mm: memcg/slab: introduce __memcg_kmem_uncharge_memcg()
            mm: memcg/slab: unify SLAB and SLUB page accounting
            mm: memcg/slab: don't check the dying flag on kmem_cache creation
            mm: memcg/slab: synchronize access to kmem_cache dying flag using a spinlock
            mm: memcg/slab: rework non-root kmem_cache lifecycle management
            mm: memcg/slab: stop setting page->mem_cgroup pointer for slab pages
            mm: memcg/slab: reparent memcg kmem_caches on cgroup removal
          mm, memcg: add a memcg_slabinfo debugfs file
    
      mm:gup:
          Patch series "switch the remaining architectures to use generic GUP", v4:
            mm: use untagged_addr() for get_user_pages_fast addresses
            mm: simplify gup_fast_permitted
            mm: lift the x86_32 PAE version of gup_get_pte to common code
            MIPS: use the generic get_user_pages_fast code
            sh: add the missing pud_page definition
            sh: use the generic get_user_pages_fast code
            sparc64: add the missing pgd_page definition
            sparc64: define untagged_addr()
            sparc64: use the generic get_user_pages_fast code
            mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP
            mm: reorder code blocks in gup.c
            mm: consolidate the get_user_pages* implementations
            mm: validate get_user_pages_fast flags
            mm: move the powerpc hugepd code to mm/gup.c
            mm: switch gup_hugepte to use try_get_compound_head
            mm: mark the page referenced in gup_hugepte
          mm/gup: speed up check_and_migrate_cma_pages() on huge page
          mm/gup.c: remove some BUG_ONs from get_gate_page()
          mm/gup.c: mark undo_dev_pagemap as __maybe_unused
    
      mm:pagemap:
          asm-generic, x86: introduce generic pte_{alloc,free}_one[_kernel]
          alpha: switch to generic version of pte allocation
          arm: switch to generic version of pte allocation
          arm64: switch to generic version of pte allocation
          csky: switch to generic version of pte allocation
          m68k: sun3: switch to generic version of pte allocation
          mips: switch to generic version of pte allocation
          nds32: switch to generic version of pte allocation
          nios2: switch to generic version of pte allocation
          parisc: switch to generic version of pte allocation
          riscv: switch to generic version of pte allocation
          um: switch to generic version of pte allocation
          unicore32: switch to generic version of pte allocation
          mm/pgtable: drop pgtable_t variable from pte_fn_t functions
          mm/memory.c: fail when offset == num in first check of __vm_map_pages()
    
      mm:infrastructure:
          mm/mmu_notifier: use hlist_add_head_rcu()
    
      mm:vmalloc:
          Patch series "Some cleanups for the KVA/vmalloc", v5:
            mm/vmalloc.c: remove "node" argument
            mm/vmalloc.c: preload a CPU with one object for split purpose
            mm/vmalloc.c: get rid of one single unlink_va() when merge
            mm/vmalloc.c: switch to WARN_ON() and move it under unlink_va()
          mm/vmalloc.c: spelling> s/informaion/information/
    
      mm:initialization:
          mm/large system hash: use vmalloc for size > MAX_ORDER when !hashdist
          mm/large system hash: clear hashdist when only one node with memory is booted
    
      mm:pagealloc:
          arm64: move jump_label_init() before parse_early_param()
          Patch series "add init_on_alloc/init_on_free boot options", v10:
            mm: security: introduce init_on_alloc=1 and init_on_free=1 boot options
            mm: init: report memory auto-initialization features at boot time
    
      mm:vmscan:
          mm: vmscan: remove double slab pressure by inc'ing sc->nr_scanned
          mm: vmscan: correct some vmscan counters for THP swapout
    
      mm:tools:
          tools/vm/slabinfo: order command line options
          tools/vm/slabinfo: add partial slab listing to -X
          tools/vm/slabinfo: add option to sort by partial slabs
          tools/vm/slabinfo: add sorting info to help menu
    
      mm:proc:
          proc: use down_read_killable mmap_sem for /proc/pid/maps
          proc: use down_read_killable mmap_sem for /proc/pid/smaps_rollup
          proc: use down_read_killable mmap_sem for /proc/pid/pagemap
          proc: use down_read_killable mmap_sem for /proc/pid/clear_refs
          proc: use down_read_killable mmap_sem for /proc/pid/map_files
          mm: use down_read_killable for locking mmap_sem in access_remote_vm
          mm: smaps: split PSS into components
          mm: vmalloc: show number of vmalloc pages in /proc/meminfo
    
      mm:ras:
          mm/memory-failure.c: clarify error message
    
      mm:oom-kill:
          mm: memcontrol: use CSS_TASK_ITER_PROCS at mem_cgroup_scan_tasks()
          mm, oom: refactor dump_tasks for memcg OOMs
          mm, oom: remove redundant task_in_mem_cgroup() check
          oom: decouple mems_allowed from oom_unkillable_task
          mm/oom_kill.c: remove redundant OOM score normalization in select_bad_process()"
    
    * akpm: (147 commits)
      mm/oom_kill.c: remove redundant OOM score normalization in select_bad_process()
      oom: decouple mems_allowed from oom_unkillable_task
      mm, oom: remove redundant task_in_mem_cgroup() check
      mm, oom: refactor dump_tasks for memcg OOMs
      mm: memcontrol: use CSS_TASK_ITER_PROCS at mem_cgroup_scan_tasks()
      mm/memory-failure.c: clarify error message
      mm: vmalloc: show number of vmalloc pages in /proc/meminfo
      mm: smaps: split PSS into components
      mm: use down_read_killable for locking mmap_sem in access_remote_vm
      proc: use down_read_killable mmap_sem for /proc/pid/map_files
      proc: use down_read_killable mmap_sem for /proc/pid/clear_refs
      proc: use down_read_killable mmap_sem for /proc/pid/pagemap
      proc: use down_read_killable mmap_sem for /proc/pid/smaps_rollup
      proc: use down_read_killable mmap_sem for /proc/pid/maps
      tools/vm/slabinfo: add sorting info to help menu
      tools/vm/slabinfo: add option to sort by partial slabs
      tools/vm/slabinfo: add partial slab listing to -X
      tools/vm/slabinfo: order command line options
      mm: vmscan: correct some vmscan counters for THP swapout
      mm: vmscan: remove double slab pressure by inc'ing sc->nr_scanned
      ...

commit d322a8e5e3e9742fa6b76a207e5df57e03f318f9
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 11 20:55:17 2019 -0700

    mm/filemap.c: fix an overly long line in read_cache_page
    
    Patch series "fix filler_t callback type mismatches", v2.
    
    Casting mapping->a_ops->readpage to filler_t causes an indirect call
    type mismatch with Control-Flow Integrity checking.  This change fixes
    the mismatch in read_cache_page_gfp and read_mapping_page by adding
    using a NULL filler argument as an indication to call ->readpage
    directly, and by passing the right parameter callbacks in nfs and jffs2.
    
    This patch (of 4):
    
    Code cleanup.
    
    Link: http://lkml.kernel.org/r/20190520055731.24538-2-hch@lst.de
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5ac94332248ee017964ba368cdda4ce647e3aba7
Merge: 1064d8577381 c191f93454bc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 14 20:56:31 2019 -0700

    Merge tag 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/rdma/rdma
    
    Pull more rdma updates from Jason Gunthorpe:
     "This is being sent to get a fix for the gcc 9.1 build warnings, and
      I've also pulled in some bug fix patches that were posted in the last
      two weeks.
    
       - Avoid the gcc 9.1 warning about overflowing a union member
    
       - Fix the wrong callback type for a single response netlink to doit
    
       - Bug fixes from more usage of the mlx5 devx interface"
    
    * tag 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/rdma/rdma:
      net/mlx5: Set completion EQs as shared resources
      IB/mlx5: Verify DEVX general object type correctly
      RDMA/core: Change system parameters callback from dumpit to doit
      RDMA: Directly cast the sockaddr union to sockaddr

commit 59f20f5a0c9767a8b66688b84e72a345b4dc1bc1
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Jul 12 14:59:22 2018 -0500

    drm/amdgpu/pp: switch smu callback type for get_argument()
    
    return a uint32_t rather than an int to properly reflect
    what the function does.
    
    Reviewed-by: Rex Zhu <rezhu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7abccdba25be45630eede85053496f1f48d36ec8
Merge: c85d6975ef92 38c8af60046e
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Apr 7 11:47:52 2015 -0400

    Merge branch 'for-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth-next
    
    Johan Hedberg says:
    
    ====================
    pull request: bluetooth-next 2015-04-04
    
    Here's what's probably the last bluetooth-next pull request for 4.1:
    
     - Fixes for LE advertising data & advertising parameters
     - Fix for race condition with HCI_RESET flag
     - New BNEPGETSUPPFEAT ioctl, needed for certification
     - New HCI request callback type to get the resulting skb
     - Cleanups to use BIT() macro wherever possible
     - Consolidate Broadcom device entries in the btusb HCI driver
     - Check for valid flags in CMTP, HIDP & BNEP
     - Disallow local privacy & OOB data combo to prevent a potential race
     - Expose SMP & ECDH selftest results through debugfs
     - Expose current Device ID info through debugfs
    
    Please let me know if there are any issues pulling. Thanks.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ca8f4fb21d08747013cce9cf1840aa5bfc31f2d8
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Mon Apr 9 00:24:02 2012 +0000

    skbuff: struct ubuf_info callback type safety
    
    The skb struct ubuf_info callback gets passed struct ubuf_info
    itself, not the arg value as the field name and the function signature
    seem to imply. Rename the arg field to ctx to match usage,
    add documentation and change the callback argument type
    to make usage clear and to have compiler check correctness.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 53da59aa6dd881fd0bbdd058a8a299d90ce9dd1d
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Fri Apr 30 12:59:59 2010 -0400

    tracepoints: Add check trace callback type
    
    This check is meant to be used by tracepoint users which do a direct cast of
    callbacks to (void *) for direct registration, thus bypassing the
    register_trace_##name and unregister_trace_##name checks.
    
    This permits to ensure that the callback type matches the function type at the
    call site, but without generating any code.
    
    Acked-by: Masami Hiramatsu <mhiramat@redhat.com>
    Acked-by: Frederic Weisbecker <fweisbec@gmail.com>
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    LKML-Reference: <20100430165959.GA25605@Krystal>
    CC: Ingo Molnar <mingo@elte.hu>
    CC: Andrew Morton <akpm@linux-foundation.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Peter Zijlstra <peterz@infradead.org>
    CC: Arnaldo Carvalho de Melo <acme@redhat.com>
    CC: Lai Jiangshan <laijs@cn.fujitsu.com>
    CC: Li Zefan <lizf@cn.fujitsu.com>
    CC: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

commit fa0fcde66ac3360678360104b24492015e7b852b
Author: Jassi Brar <jassi.brar@samsung.com>
Date:   Wed Jan 20 13:49:45 2010 -0700

    spi/s3c64xx: Add new parameter to cs callback
    
    Since most of the chip-selects are simply going to be like
    gpio_set_value, it would do good to have the same callback type
    so that it could simply be made to point at gpio_set_value.
    
    Signed-off-by: Jassi Brar <jassi.brar@samsung.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit 5220ed6b321639d68a66bad2082456c1b273f3ea
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Dec 1 20:00:47 2008 +0100

    ALSA: ASoC: Fix compile warnings on corgi.c
    
    Fix the wrong shutdown callback type.  Also removed the unused variables
    there:
    
      sound/soc/pxa/corgi.c: In function 'corgi_shutdown':
      sound/soc/pxa/corgi.c:114: warning: unused variable 'codec'
      sound/soc/pxa/corgi.c: At top level:
      sound/soc/pxa/corgi.c:175: warning: initialization from incompatible pointer type
    
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
