commit d2a02e3c8bb6b347818518edff5a4b40ff52d6d8
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jan 19 14:35:06 2022 +0100

    lib/crypto: blake2s: avoid indirect calls to compression function for Clang CFI
    
    blake2s_compress_generic is weakly aliased by blake2s_compress. The
    current harness for function selection uses a function pointer, which is
    ordinarily inlined and resolved at compile time. But when Clang's CFI is
    enabled, CFI still triggers when making an indirect call via a weak
    symbol. This seems like a bug in Clang's CFI, as though it's bucketing
    weak symbols and strong symbols differently. It also only seems to
    trigger when "full LTO" mode is used, rather than "thin LTO".
    
    [    0.000000][    T0] Kernel panic - not syncing: CFI failure (target: blake2s_compress_generic+0x0/0x1444)
    [    0.000000][    T0] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.16.0-mainline-06981-g076c855b846e #1
    [    0.000000][    T0] Hardware name: MT6873 (DT)
    [    0.000000][    T0] Call trace:
    [    0.000000][    T0]  dump_backtrace+0xfc/0x1dc
    [    0.000000][    T0]  dump_stack_lvl+0xa8/0x11c
    [    0.000000][    T0]  panic+0x194/0x464
    [    0.000000][    T0]  __cfi_check_fail+0x54/0x58
    [    0.000000][    T0]  __cfi_slowpath_diag+0x354/0x4b0
    [    0.000000][    T0]  blake2s_update+0x14c/0x178
    [    0.000000][    T0]  _extract_entropy+0xf4/0x29c
    [    0.000000][    T0]  crng_initialize_primary+0x24/0x94
    [    0.000000][    T0]  rand_initialize+0x2c/0x6c
    [    0.000000][    T0]  start_kernel+0x2f8/0x65c
    [    0.000000][    T0]  __primary_switched+0xc4/0x7be4
    [    0.000000][    T0] Rebooting in 5 seconds..
    
    Nonetheless, the function pointer method isn't so terrific anyway, so
    this patch replaces it with a simple boolean, which also gets inlined
    away. This successfully works around the Clang bug.
    
    In general, I'm not too keen on all of the indirection involved here; it
    clearly does more harm than good. Hopefully the whole thing can get
    cleaned up down the road when lib/crypto is overhauled more
    comprehensively. But for now, we go with a simple bandaid.
    
    Fixes: 6048fdcc5f26 ("lib/crypto: blake2s: include as built-in")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1567
    Reported-by: Miles Chen <miles.chen@mediatek.com>
    Tested-by: Miles Chen <miles.chen@mediatek.com>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>

commit 7ce1bb83a14019f8c396d57ec704d19478747716
Author: Kalesh Singh <kaleshsingh@google.com>
Date:   Wed Oct 13 21:52:17 2021 -0700

    tracing/cfi: Fix cmp_entries_* functions signature mismatch
    
    If CONFIG_CFI_CLANG=y, attempting to read an event histogram will cause
    the kernel to panic due to failed CFI check.
    
        1. echo 'hist:keys=common_pid' >> events/sched/sched_switch/trigger
        2. cat events/sched/sched_switch/hist
        3. kernel panics on attempting to read hist
    
    This happens because the sort() function expects a generic
    int (*)(const void *, const void *) pointer for the compare function.
    To prevent this CFI failure, change tracing map cmp_entries_* function
    signatures to match this.
    
    Also, fix the build error reported by the kernel test robot [1].
    
    [1] https://lore.kernel.org/r/202110141140.zzi4dRh4-lkp@intel.com/
    
    Link: https://lkml.kernel.org/r/20211014045217.3265162-1-kaleshsingh@google.com
    
    Signed-off-by: Kalesh Singh <kaleshsingh@google.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

commit fca41af18e10318e4de090db47d9fa7169e1bf2f
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Feb 11 12:42:58 2021 -0700

    qemu_fw_cfg: Make fw_cfg_rev_attr a proper kobj_attribute
    
    fw_cfg_showrev() is called by an indirect call in kobj_attr_show(),
    which violates clang's CFI checking because fw_cfg_showrev()'s second
    parameter is 'struct attribute', whereas the ->show() member of 'struct
    kobj_structure' expects the second parameter to be of type 'struct
    kobj_attribute'.
    
    $ cat /sys/firmware/qemu_fw_cfg/rev
    3
    
    $ dmesg | grep "CFI failure"
    [   26.016832] CFI failure (target: fw_cfg_showrev+0x0/0x8):
    
    Fix this by converting fw_cfg_rev_attr to 'struct kobj_attribute' where
    this would have been caught automatically by the incompatible pointer
    types compiler warning. Update fw_cfg_showrev() accordingly.
    
    Fixes: 75f3e8e47f38 ("firmware: introduce sysfs driver for QEMU's fw_cfg device")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1299
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Philippe Mathieu-Daud√© <philmd@redhat.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210211194258.4137998-1-nathan@kernel.org

commit f37ccf8fce155d08ae2a4fb3db677911ced0c21a
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Jun 22 18:38:01 2021 -0700

    ACPI: bgrt: Fix CFI violation
    
    clang's Control Flow Integrity requires that every indirect call has a
    valid target, which is based on the type of the function pointer. The
    *_show() functions in this file are written as if they will be called
    from dev_attr_show(); however, they will be called from
    sysfs_kf_seq_show() because the files were created by
    sysfs_create_group() and the sysfs ops are based on kobj_sysfs_ops
    because of kobject_add_and_create(). Because the *_show() functions do
    not match the type of the show() member in struct kobj_attribute, there
    is a CFI violation.
    
    $ cat /sys/firmware/acpi/bgrt/{status,type,version,{x,y}offset}}
    1
    0
    1
    522
    307
    
    $ dmesg | grep "CFI failure"
    [  267.761825] CFI failure (target: type_show.d5e1ad21498a5fd14edbc5c320906598.cfi_jt+0x0/0x8):
    [  267.762246] CFI failure (target: xoffset_show.d5e1ad21498a5fd14edbc5c320906598.cfi_jt+0x0/0x8):
    [  267.762584] CFI failure (target: status_show.d5e1ad21498a5fd14edbc5c320906598.cfi_jt+0x0/0x8):
    [  267.762973] CFI failure (target: yoffset_show.d5e1ad21498a5fd14edbc5c320906598.cfi_jt+0x0/0x8):
    [  267.763330] CFI failure (target: version_show.d5e1ad21498a5fd14edbc5c320906598.cfi_jt+0x0/0x8):
    
    Convert these functions to the type of the show() member in struct
    kobj_attribute so that there is no more CFI violation. Because these
    functions are all so similar, combine them into a macro.
    
    Fixes: d1ff4b1cdbab ("ACPI: Add support for exposing BGRT data")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1406
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 5deac80d4571dffb51f452f0027979d72259a1b9
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Apr 14 17:11:12 2021 -0700

    perf/amd/uncore: Fix sysfs type mismatch
    
    dev_attr_show() calls the __uncore_*_show() functions via an indirect
    call but their type does not currently match the type of the show()
    member in 'struct device_attribute', resulting in a Control Flow
    Integrity violation.
    
    $ cat /sys/devices/amd_l3/format/umask
    config:8-15
    
    $ dmesg | grep "CFI failure"
    [ 1258.174653] CFI failure (target: __uncore_umask_show...):
    
    Update the type in the DEFINE_UNCORE_FORMAT_ATTR macro to match
    'struct device_attribute' so that there is no more CFI violation.
    
    Fixes: 06f2c24584f3 ("perf/amd/uncore: Prepare to scale for more attributes that vary per family")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210415001112.3024673-2-nathan@kernel.org

commit de5bc7b425d4c27ae5faa00ea7eb6b9780b9a355
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Apr 14 17:11:11 2021 -0700

    x86/events/amd/iommu: Fix sysfs type mismatch
    
    dev_attr_show() calls _iommu_event_show() via an indirect call but
    _iommu_event_show()'s type does not currently match the type of the
    show() member in 'struct device_attribute', resulting in a Control Flow
    Integrity violation.
    
    $ cat /sys/devices/amd_iommu_1/events/mem_dte_hit
    csource=0x0a
    
    $ dmesg | grep "CFI failure"
    [ 3526.735140] CFI failure (target: _iommu_event_show...):
    
    Change _iommu_event_show() and 'struct amd_iommu_event_desc' to
    'struct device_attribute' so that there is no more CFI violation.
    
    Fixes: 7be6296fdd75 ("perf/x86/amd: AMD IOMMU Performance Counter PERF uncore PMU implementation")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210415001112.3024673-1-nathan@kernel.org

commit ff301ceb5299551c3650d0e07ba879b766da4cc0
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Thu Apr 8 11:28:27 2021 -0700

    cfi: add __cficanonical
    
    With CONFIG_CFI_CLANG, the compiler replaces a function address taken
    in C code with the address of a local jump table entry, which passes
    runtime indirect call checks. However, the compiler won't replace
    addresses taken in assembly code, which will result in a CFI failure
    if we later jump to such an address in instrumented C code. The code
    generated for the non-canonical jump table looks this:
    
      <noncanonical.cfi_jt>: /* In C, &noncanonical points here */
            jmp noncanonical
      ...
      <noncanonical>:        /* function body */
            ...
    
    This change adds the __cficanonical attribute, which tells the
    compiler to use a canonical jump table for the function instead. This
    means the compiler will rename the actual function to <function>.cfi
    and points the original symbol to the jump table entry instead:
    
      <canonical>:           /* jump table entry */
            jmp canonical.cfi
      ...
      <canonical.cfi>:       /* function body */
            ...
    
    As a result, the address taken in assembly, or other non-instrumented
    code always points to the jump table and therefore, can be used for
    indirect calls in instrumented code without tripping CFI checks.
    
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>   # pci.h
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20210408182843.1754385-3-samitolvanen@google.com

commit cf68fffb66d60d96209446bfc4a15291dc5a5d41
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Thu Apr 8 11:28:26 2021 -0700

    add support for Clang CFI
    
    This change adds support for Clang‚Äôs forward-edge Control Flow
    Integrity (CFI) checking. With CONFIG_CFI_CLANG, the compiler
    injects a runtime check before each indirect function call to ensure
    the target is a valid function with the correct static type. This
    restricts possible call targets and makes it more difficult for
    an attacker to exploit bugs that allow the modification of stored
    function pointers. For more details, see:
    
      https://clang.llvm.org/docs/ControlFlowIntegrity.html
    
    Clang requires CONFIG_LTO_CLANG to be enabled with CFI to gain
    visibility to possible call targets. Kernel modules are supported
    with Clang‚Äôs cross-DSO CFI mode, which allows checking between
    independently compiled components.
    
    With CFI enabled, the compiler injects a __cfi_check() function into
    the kernel and each module for validating local call targets. For
    cross-module calls that cannot be validated locally, the compiler
    calls the global __cfi_slowpath_diag() function, which determines
    the target module and calls the correct __cfi_check() function. This
    patch includes a slowpath implementation that uses __module_address()
    to resolve call targets, and with CONFIG_CFI_CLANG_SHADOW enabled, a
    shadow map that speeds up module look-ups by ~3x.
    
    Clang implements indirect call checking using jump tables and
    offers two methods of generating them. With canonical jump tables,
    the compiler renames each address-taken function to <function>.cfi
    and points the original symbol to a jump table entry, which passes
    __cfi_check() validation. This isn‚Äôt compatible with stand-alone
    assembly code, which the compiler doesn‚Äôt instrument, and would
    result in indirect calls to assembly code to fail. Therefore, we
    default to using non-canonical jump tables instead, where the compiler
    generates a local jump table entry <function>.cfi_jt for each
    address-taken function, and replaces all references to the function
    with the address of the jump table entry.
    
    Note that because non-canonical jump table addresses are local
    to each component, they break cross-module function address
    equality. Specifically, the address of a global function will be
    different in each module, as it's replaced with the address of a local
    jump table entry. If this address is passed to a different module,
    it won‚Äôt match the address of the same function taken there. This
    may break code that relies on comparing addresses passed from other
    components.
    
    CFI checking can be disabled in a function with the __nocfi attribute.
    Additionally, CFI can be disabled for an entire compilation unit by
    filtering out CC_FLAGS_CFI.
    
    By default, CFI failures result in a kernel panic to stop a potential
    exploit. CONFIG_CFI_PERMISSIVE enables a permissive mode, where the
    kernel prints out a rate-limited warning instead, and allows execution
    to continue. This option is helpful for locating type mismatches, but
    should only be enabled during development.
    
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20210408182843.1754385-2-samitolvanen@google.com

commit 2bc6262c6117dd18106d5aa50d53e945b5d99c51
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Apr 7 14:30:48 2021 -0700

    ACPI: CPPC: Replace cppc_attr with kobj_attribute
    
    All of the CPPC sysfs show functions are called via indirect call in
    kobj_attr_show(), where they should be of type
    
    ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr, char *buf);
    
    because that is the type of the ->show() member in
    'struct kobj_attribute' but they are actually of type
    
    ssize_t (*show)(struct kobject *kobj, struct attribute *attr, char *buf);
    
    because of the ->show() member in 'struct cppc_attr', resulting in a
    Control Flow Integrity violation [1].
    
    $ cat /sys/devices/system/cpu/cpu0/acpi_cppc/highest_perf
    3400
    
    $ dmesg | grep "CFI failure"
    [  175.970559] CFI failure (target: show_highest_perf+0x0/0x8):
    
    As far as I can tell, the only difference between 'struct cppc_attr'
    and 'struct kobj_attribute' aside from the type of the attr parameter
    is the type of the count parameter in the ->store() member (ssize_t vs.
    size_t), which does not actually matter because all of these nodes are
    read-only.
    
    Eliminate 'struct cppc_attr' in favor of 'struct kobj_attribute' to fix
    the violation.
    
    [1]: https://lore.kernel.org/r/20210401233216.2540591-1-samitolvanen@google.com/
    
    Fixes: 158c998ea44b ("ACPI / CPPC: add sysfs support to compute delivered performance")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1343
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 2bf2346159bc99cf0679e25be20f4daca60f3f5c
Author: Jindong Yue <jindong.yue@nxp.com>
Date:   Wed Feb 24 13:58:25 2021 +0800

    remoteproc: core: Remove casting to rproc_handle_resource_t
    
    There are four different callback functions that are used for the
    rproc_handle_resource_t callback that all have different second
    parameter types.
    
    rproc_handle_vdev -> struct fw_rsc_vdev
    rproc_handle_trace -> struct fw_rsc_trace
    rproc_handle_devmem -> struct fw_rsc_devmem
    rproc_handle_carveout -> struct fw_rsc_carveout
    
    These callbacks are cast to rproc_handle_resource_t so that there is no
    error about incompatible pointer types. Unfortunately, this is a Clang's
    Control-Flow Integrity checking violation, which verifies that the
    callback function's types match the prototypes exactly before jumping.
    
    [    7.275750] Kernel panic - not syncing: CFI failure (target: rproc_handle_vdev+0x0/0x4)
    [    7.283763] CPU: 2 PID: 1 Comm: init Tainted: G         C O      5.4.70-03301-g527af2c96672 #17
    [    7.292463] Hardware name: NXP i.MX8MPlus EVK board (DT)
    [    7.297779] Call trace:
    [    7.300232]  dump_backtrace.cfi_jt+0x0/0x4
    [    7.304337]  show_stack+0x18/0x24
    [    7.307660]  dump_stack+0xb8/0x114
    [    7.311069]  panic+0x164/0x3d4
    [    7.314130]  __ubsan_handle_cfi_check_fail_abort+0x0/0x14
    [    7.319533]  perf_proc_update_handler+0x0/0xcc
    [    7.323983]  __cfi_check+0x63278/0x6a290
    [    7.327913]  rproc_boot+0x3f8/0x738
    [    7.331404]  rproc_add+0x68/0x110
    [    7.334738]  imx_rproc_probe+0x5e4/0x708 [imx_rproc]
    [    7.339711]  platform_drv_probe+0xac/0xf0
    [    7.343726]  really_probe+0x260/0x65c
    [    7.347393]  driver_probe_device+0x64/0x100
    [    7.351580]  device_driver_attach+0x6c/0xac
    [    7.355766]  __driver_attach+0xdc/0x184
    [    7.359609]  bus_for_each_dev+0x98/0x104
    [    7.363537]  driver_attach+0x24/0x30
    [    7.367117]  bus_add_driver+0x100/0x1e0
    [    7.370958]  driver_register+0x78/0x114
    [    7.374800]  __platform_driver_register+0x44/0x50
    [    7.379514]  init_module+0x20/0xfe8 [imx_rproc]
    [    7.384049]  do_one_initcall+0x190/0x348
    [    7.387979]  do_init_module+0x5c/0x210
    [    7.391731]  load_module+0x2fbc/0x3590
    [    7.395485]  __arm64_sys_finit_module+0xb8/0xec
    [    7.400025]  el0_svc_common+0xb4/0x19c
    [    7.403777]  el0_svc_handler+0x74/0x98
    [    7.407531]  el0_svc+0x8/0xc
    [    7.410419] SMP: stopping secondary CPUs
    [    7.414648] Kernel Offset: disabled
    [    7.418142] CPU features: 0x00010002,2000200c
    [    7.422501] Memory Limit: none
    
    To fix this, change the second parameter of all functions to void * and
    use a local variable with the correct type so that everything works
    properly. With this, we can remove casting to rproc_handle_resource_t
    for these functions.
    
    Signed-off-by: Jindong Yue <jindong.yue@nxp.com>
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20210224055825.7417-1-jindong.yue@nxp.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 362b9398c962c9ec563653444e15ef9032ef3a90
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Jul 24 23:03:54 2020 -0700

    usb: dwc2: Fix parameter type in function pointer prototype
    
    When booting up on a Raspberry Pi 4 with Control Flow Integrity checking
    enabled, the following warning/panic happens:
    
    [    1.626435] CFI failure (target: dwc2_set_bcm_params+0x0/0x4):
    [    1.632408] WARNING: CPU: 0 PID: 32 at kernel/cfi.c:30 __cfi_check_fail+0x54/0x5c
    [    1.640021] Modules linked in:
    [    1.643137] CPU: 0 PID: 32 Comm: kworker/0:1 Not tainted 5.8.0-rc6-next-20200724-00051-g89ba619726de #1
    [    1.652693] Hardware name: Raspberry Pi 4 Model B Rev 1.2 (DT)
    [    1.658637] Workqueue: events deferred_probe_work_func
    [    1.663870] pstate: 60000005 (nZCv daif -PAN -UAO BTYPE=--)
    [    1.669542] pc : __cfi_check_fail+0x54/0x5c
    [    1.673798] lr : __cfi_check_fail+0x54/0x5c
    [    1.678050] sp : ffff8000102bbaa0
    [    1.681419] x29: ffff8000102bbaa0 x28: ffffab09e21c7000
    [    1.686829] x27: 0000000000000402 x26: ffff0000f6e7c228
    [    1.692238] x25: 00000000fb7cdb0d x24: 0000000000000005
    [    1.697647] x23: ffffab09e2515000 x22: ffffab09e069a000
    [    1.703055] x21: 4c550309df1cf4c1 x20: ffffab09e2433c60
    [    1.708462] x19: ffffab09e160dc50 x18: ffff0000f6e8cc78
    [    1.713870] x17: 0000000000000041 x16: ffffab09e0bce6f8
    [    1.719278] x15: ffffab09e1c819b7 x14: 0000000000000003
    [    1.724686] x13: 00000000ffffefff x12: 0000000000000000
    [    1.730094] x11: 0000000000000000 x10: 00000000ffffffff
    [    1.735501] x9 : c932f7abfc4bc600 x8 : c932f7abfc4bc600
    [    1.740910] x7 : 077207610770075f x6 : ffff0000f6c38f00
    [    1.746317] x5 : 0000000000000000 x4 : 0000000000000000
    [    1.751723] x3 : 0000000000000000 x2 : 0000000000000000
    [    1.757129] x1 : ffff8000102bb7d8 x0 : 0000000000000032
    [    1.762539] Call trace:
    [    1.765030]  __cfi_check_fail+0x54/0x5c
    [    1.768938]  __cfi_check+0x5fa6c/0x66afc
    [    1.772932]  dwc2_init_params+0xd74/0xd78
    [    1.777012]  dwc2_driver_probe+0x484/0x6ec
    [    1.781180]  platform_drv_probe+0xb4/0x100
    [    1.785350]  really_probe+0x228/0x63c
    [    1.789076]  driver_probe_device+0x80/0xc0
    [    1.793247]  __device_attach_driver+0x114/0x160
    [    1.797857]  bus_for_each_drv+0xa8/0x128
    [    1.801851]  __device_attach.llvm.14901095709067289134+0xc0/0x170
    [    1.808050]  bus_probe_device+0x44/0x100
    [    1.812044]  deferred_probe_work_func+0x78/0xb8
    [    1.816656]  process_one_work+0x204/0x3c4
    [    1.820736]  worker_thread+0x2f0/0x4c4
    [    1.824552]  kthread+0x174/0x184
    [    1.827837]  ret_from_fork+0x10/0x18
    
    CFI validates that all indirect calls go to a function with the same
    exact function pointer prototype. In this case, dwc2_set_bcm_params
    is the target, which has a parameter of type 'struct dwc2_hsotg *',
    but it is being implicitly cast to have a parameter of type 'void *'
    because that is the set_params function pointer prototype. Make the
    function pointer protoype match the definitions so that there is no
    more violation.
    
    Fixes: 7de1debcd2de ("usb: dwc2: Remove platform static params")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1107
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>

commit e6d701dca9893990d999fd145e3e07223c002b06
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Jun 11 21:51:50 2020 -0700

    ACPI: sysfs: Fix pm_profile_attr type
    
    When running a kernel with Clang's Control Flow Integrity implemented,
    there is a violation that happens when accessing
    /sys/firmware/acpi/pm_profile:
    
    $ cat /sys/firmware/acpi/pm_profile
    0
    
    $ dmesg
    ...
    [   17.352564] ------------[ cut here ]------------
    [   17.352568] CFI failure (target: acpi_show_profile+0x0/0x8):
    [   17.352572] WARNING: CPU: 3 PID: 497 at kernel/cfi.c:29 __cfi_check_fail+0x33/0x40
    [   17.352573] Modules linked in:
    [   17.352575] CPU: 3 PID: 497 Comm: cat Tainted: G        W         5.7.0-microsoft-standard+ #1
    [   17.352576] RIP: 0010:__cfi_check_fail+0x33/0x40
    [   17.352577] Code: 48 c7 c7 50 b3 85 84 48 c7 c6 50 0a 4e 84 e8 a4 d8 60 00 85 c0 75 02 5b c3 48 c7 c7 dc 5e 49 84 48 89 de 31 c0 e8 7d 06 eb ff <0f> 0b 5b c3 00 00 cc cc 00 00 cc cc 00 85 f6 74 25 41 b9 ea ff ff
    [   17.352577] RSP: 0018:ffffaa6dc3c53d30 EFLAGS: 00010246
    [   17.352578] RAX: 331267e0c06cee00 RBX: ffffffff83d85890 RCX: ffffffff8483a6f8
    [   17.352579] RDX: ffff9cceabbb37c0 RSI: 0000000000000082 RDI: ffffffff84bb9e1c
    [   17.352579] RBP: ffffffff845b2bc8 R08: 0000000000000001 R09: ffff9cceabbba200
    [   17.352579] R10: 000000000000019d R11: 0000000000000000 R12: ffff9cc947766f00
    [   17.352580] R13: ffffffff83d6bd50 R14: ffff9ccc6fa80000 R15: ffffffff845bd328
    [   17.352582] FS:  00007fdbc8d13580(0000) GS:ffff9cce91ac0000(0000) knlGS:0000000000000000
    [   17.352582] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   17.352583] CR2: 00007fdbc858e000 CR3: 00000005174d0000 CR4: 0000000000340ea0
    [   17.352584] Call Trace:
    [   17.352586]  ? rev_id_show+0x8/0x8
    [   17.352587]  ? __cfi_check+0x45bac/0x4b640
    [   17.352589]  ? kobj_attr_show+0x73/0x80
    [   17.352590]  ? sysfs_kf_seq_show+0xc1/0x140
    [   17.352592]  ? ext4_seq_options_show.cfi_jt+0x8/0x8
    [   17.352593]  ? seq_read+0x180/0x600
    [   17.352595]  ? sysfs_create_file_ns.cfi_jt+0x10/0x10
    [   17.352596]  ? tlbflush_read_file+0x8/0x8
    [   17.352597]  ? __vfs_read+0x6b/0x220
    [   17.352598]  ? handle_mm_fault+0xa23/0x11b0
    [   17.352599]  ? vfs_read+0xa2/0x130
    [   17.352599]  ? ksys_read+0x6a/0xd0
    [   17.352601]  ? __do_sys_getpgrp+0x8/0x8
    [   17.352602]  ? do_syscall_64+0x72/0x120
    [   17.352603]  ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   17.352604] ---[ end trace 7b1fa81dc897e419 ]---
    
    When /sys/firmware/acpi/pm_profile is read, sysfs_kf_seq_show is called,
    which in turn calls kobj_attr_show, which gets the ->show callback
    member by calling container_of on attr (casting it to struct
    kobj_attribute) then calls it.
    
    There is a CFI violation because pm_profile_attr is of type
    struct device_attribute but kobj_attr_show calls ->show expecting it
    to be from struct kobj_attribute. CFI checking ensures that function
    pointer types match when doing indirect calls. Fix pm_profile_attr to
    be defined in terms of kobj_attribute so there is no violation or
    mismatch.
    
    Fixes: 362b646062b2 ("ACPI: Export FADT pm_profile integer value to userspace")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1051
    Reported-by: yuu ichii <byahu140@heisei.be>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Cc: 3.10+ <stable@vger.kernel.org> # 3.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 99a1ae29360980e79fa2d616819a6fe7411e4eda
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Sat May 16 01:08:07 2020 -0700

    clk: bcm2835: Remove casting to bcm2835_clk_register
    
    There are four different callback functions that are used for the
    clk_register callback that all have different second parameter types.
    
    bcm2835_register_pll -> struct bcm2835_pll_data
    bcm2835_register_pll_divider -> struct bcm2835_pll_divider_data
    bcm2835_register_clock -> struct bcm2835_clock_data
    bcm2835_register_date -> struct bcm2835_gate_data
    
    These callbacks are cast to bcm2835_clk_register so that there is no
    error about incompatible pointer types. Unfortunately, this is a control
    flow integrity violation, which verifies that the callback function's
    types match the prototypes exactly before jumping.
    
    [    0.857913] CFI failure (target: 0xffffff9334a81820):
    [    0.857977] WARNING: CPU: 3 PID: 35 at kernel/cfi.c:29 __cfi_check_fail+0x50/0x58
    [    0.857985] Modules linked in:
    [    0.858007] CPU: 3 PID: 35 Comm: kworker/3:1 Not tainted 4.19.123-v8-01301-gdbb48f16956e4-dirty #1
    [    0.858015] Hardware name: Raspberry Pi 3 Model B Rev 1.2 (DT)
    [    0.858031] Workqueue: events 0xffffff9334a925c8
    [    0.858046] pstate: 60000005 (nZCv daif -PAN -UAO)
    [    0.858058] pc : __cfi_check_fail+0x50/0x58
    [    0.858070] lr : __cfi_check_fail+0x50/0x58
    [    0.858078] sp : ffffff800814ba90
    [    0.858086] x29: ffffff800814ba90 x28: 000fffffffdfff3d
    [    0.858101] x27: 00000000002000c2 x26: ffffff93355fdb18
    [    0.858116] x25: 0000000000000000 x24: ffffff9334a81820
    [    0.858131] x23: ffffff93357f3580 x22: ffffff9334af1000
    [    0.858146] x21: a79b57e88f8ebc81 x20: ffffff93357f3580
    [    0.858161] x19: ffffff9334a81820 x18: fffffff679769070
    [    0.858175] x17: 0000000000000000 x16: 0000000000000000
    [    0.858190] x15: 0000000000000004 x14: 000000000000003c
    [    0.858205] x13: 0000000000003044 x12: 0000000000000000
    [    0.858220] x11: b57e91cd641bae00 x10: b57e91cd641bae00
    [    0.858235] x9 : b57e91cd641bae00 x8 : b57e91cd641bae00
    [    0.858250] x7 : 0000000000000000 x6 : ffffff933591d4e5
    [    0.858264] x5 : 0000000000000000 x4 : 0000000000000000
    [    0.858279] x3 : ffffff800814b718 x2 : ffffff9334a84818
    [    0.858293] x1 : ffffff9334bba66c x0 : 0000000000000029
    [    0.858308] Call trace:
    [    0.858321]  __cfi_check_fail+0x50/0x58
    [    0.858337]  __cfi_check+0x3ab3c/0x4467c
    [    0.858351]  bcm2835_clk_probe+0x210/0x2dc
    [    0.858369]  platform_drv_probe+0xb0/0xfc
    [    0.858380]  really_probe+0x4a0/0x5a8
    [    0.858391]  driver_probe_device+0x68/0x104
    [    0.858403]  __device_attach_driver+0x100/0x148
    [    0.858418]  bus_for_each_drv+0xb0/0x12c
    [    0.858431]  __device_attach.llvm.17225159516306086099+0xc0/0x168
    [    0.858443]  bus_probe_device+0x44/0xfc
    [    0.858455]  deferred_probe_work_func+0xa0/0xe0
    [    0.858472]  process_one_work+0x210/0x538
    [    0.858485]  worker_thread+0x2e8/0x478
    [    0.858500]  kthread+0x154/0x164
    [    0.858515]  ret_from_fork+0x10/0x18
    
    To fix this, change the second parameter of all functions void * and use
    a local variable with the correct type so that everything works
    properly. With this, the only use of bcm2835_clk_register is in struct
    bcm2835_clk_desc so we can just remove it and use the type directly.
    
    Fixes: 56eb3a2ed972 ("clk: bcm2835: remove use of BCM2835_CLOCK_COUNT in driver")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1028
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://lkml.kernel.org/r/20200516080806.1459784-2-natechancellor@gmail.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

commit 7fdc66debebc6a7170a37c8c9b0d9585a9788fb4
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Apr 28 10:54:56 2020 -0700

    hv_netvsc: Fix netvsc_start_xmit's return type
    
    netvsc_start_xmit is used as a callback function for the ndo_start_xmit
    function pointer. ndo_start_xmit's return type is netdev_tx_t but
    netvsc_start_xmit's return type is int.
    
    This causes a failure with Control Flow Integrity (CFI), which requires
    function pointer prototypes and callback function definitions to match
    exactly. When CFI is in enforcing, the kernel panics. When booting a
    CFI kernel with WSL 2, the VM is immediately terminated because of this.
    
    The splat when CONFIG_CFI_PERMISSIVE is used:
    
    [    5.916765] CFI failure (target: netvsc_start_xmit+0x0/0x10):
    [    5.916771] WARNING: CPU: 8 PID: 0 at kernel/cfi.c:29 __cfi_check_fail+0x2e/0x40
    [    5.916772] Modules linked in:
    [    5.916774] CPU: 8 PID: 0 Comm: swapper/8 Not tainted 5.7.0-rc3-next-20200424-microsoft-cbl-00001-ged4eb37d2c69-dirty #1
    [    5.916776] RIP: 0010:__cfi_check_fail+0x2e/0x40
    [    5.916777] Code: 48 c7 c7 70 98 63 a9 48 c7 c6 11 db 47 a9 e8 69 55 59 00 85 c0 75 02 5b c3 48 c7 c7 73 c6 43 a9 48 89 de 31 c0 e8 12 2d f0 ff <0f> 0b 5b c3 00 00 cc cc 00 00 cc cc 00 00 cc cc 00 00 85 f6 74 25
    [    5.916778] RSP: 0018:ffffa803c0260b78 EFLAGS: 00010246
    [    5.916779] RAX: 712a1af25779e900 RBX: ffffffffa8cf7950 RCX: ffffffffa962cf08
    [    5.916779] RDX: ffffffffa9c36b60 RSI: 0000000000000082 RDI: ffffffffa9c36b5c
    [    5.916780] RBP: ffff8ffc4779c2c0 R08: 0000000000000001 R09: ffffffffa9c3c300
    [    5.916781] R10: 0000000000000151 R11: ffffffffa9c36b60 R12: ffff8ffe39084000
    [    5.916782] R13: ffffffffa8cf7950 R14: ffffffffa8d12cb0 R15: ffff8ffe39320140
    [    5.916784] FS:  0000000000000000(0000) GS:ffff8ffe3bc00000(0000) knlGS:0000000000000000
    [    5.916785] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    5.916786] CR2: 00007ffef5749408 CR3: 00000002f4f5e000 CR4: 0000000000340ea0
    [    5.916787] Call Trace:
    [    5.916788]  <IRQ>
    [    5.916790]  __cfi_check+0x3ab58/0x450e0
    [    5.916793]  ? dev_hard_start_xmit+0x11f/0x160
    [    5.916795]  ? sch_direct_xmit+0xf2/0x230
    [    5.916796]  ? __dev_queue_xmit.llvm.11471227737707190958+0x69d/0x8e0
    [    5.916797]  ? neigh_resolve_output+0xdf/0x220
    [    5.916799]  ? neigh_connected_output.cfi_jt+0x8/0x8
    [    5.916801]  ? ip6_finish_output2+0x398/0x4c0
    [    5.916803]  ? nf_nat_ipv6_out+0x10/0xa0
    [    5.916804]  ? nf_hook_slow+0x84/0x100
    [    5.916807]  ? ip6_input_finish+0x8/0x8
    [    5.916807]  ? ip6_output+0x6f/0x110
    [    5.916808]  ? __ip6_local_out.cfi_jt+0x8/0x8
    [    5.916810]  ? mld_sendpack+0x28e/0x330
    [    5.916811]  ? ip_rt_bug+0x8/0x8
    [    5.916813]  ? mld_ifc_timer_expire+0x2db/0x400
    [    5.916814]  ? neigh_proxy_process+0x8/0x8
    [    5.916816]  ? call_timer_fn+0x3d/0xd0
    [    5.916817]  ? __run_timers+0x2a9/0x300
    [    5.916819]  ? rcu_core_si+0x8/0x8
    [    5.916820]  ? run_timer_softirq+0x14/0x30
    [    5.916821]  ? __do_softirq+0x154/0x262
    [    5.916822]  ? native_x2apic_icr_write+0x8/0x8
    [    5.916824]  ? irq_exit+0xba/0xc0
    [    5.916825]  ? hv_stimer0_vector_handler+0x99/0xe0
    [    5.916826]  ? hv_stimer0_callback_vector+0xf/0x20
    [    5.916826]  </IRQ>
    [    5.916828]  ? hv_stimer_global_cleanup.cfi_jt+0x8/0x8
    [    5.916829]  ? raw_setsockopt+0x8/0x8
    [    5.916830]  ? default_idle+0xe/0x10
    [    5.916832]  ? do_idle.llvm.10446269078108580492+0xb7/0x130
    [    5.916833]  ? raw_setsockopt+0x8/0x8
    [    5.916833]  ? cpu_startup_entry+0x15/0x20
    [    5.916835]  ? cpu_hotplug_enable.cfi_jt+0x8/0x8
    [    5.916836]  ? start_secondary+0x188/0x190
    [    5.916837]  ? secondary_startup_64+0xa5/0xb0
    [    5.916838] ---[ end trace f2683fa869597ba5 ]---
    
    Avoid this by using the right return type for netvsc_start_xmit.
    
    Fixes: fceaf24a943d8 ("Staging: hv: add the Hyper-V virtual network driver")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1009
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
