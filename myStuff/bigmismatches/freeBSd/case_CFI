commit b5459dd3541e76a46d3c49b480742ded05c429fd
Author: Alexander <solbjorn@users.noreply.github.com>
Date:   Tue Nov 29 18:56:16 2022 +0100

    Fix the last two CFI callback prototype mismatches
    
    There was the series from me a year ago which fixed most of the
    callback vs implementation prototype mismatches. It was based on
    running the CFI-enabled kernel (in permissive mode -- warning
    instead of panic) and performing a full ZTS cycle, and then fixing
    all of the problems caught by CFI.
    Now, Clang 16-dev has new warning flag, -Wcast-function-type-strict,
    which detect such mismatches at compile-time. It allows to find the
    remaining issues missed by the first series.
    There are only two of them left: one for the
    secpolicy_vnode_setattr() callback and one for taskq_dispatch().
    The fix is easy, since they are not used anywhere else.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Closes #14207

commit a35572b16e38420f5f7573b13bfe2c3b07a79d19
Author: John Baldwin <jhb@FreeBSD.org>
Date:   Thu Sep 29 15:06:01 2022 -0700

    linux32: binutils as requires %eflags instead of %flags for CFI.
    
    Reviewed by:    kib
    Differential Revision:  https://reviews.freebsd.org/D36781

commit 7b6f5ebef68194c09708abeb6426ca7602b6dab1
Author: Dimitry Andric <dim@FreeBSD.org>
Date:   Fri May 27 20:23:37 2022 +0200

    Add several sanitizer ignore lists under /usr/lib/clang
    
    Some of the sanitizers from compiler-rt can use ignore lists, which are
    loosely modeled on valgrind's example. Upstream provides default lists
    for AddressSanitizer, CFI, and MemorySanitizer, so install these in the
    expected location, /usr/lib/clang/14.0.3/share.
    
    Reviewed by:    emaste
    MFC after:      2 weeks
    Differential Revision: https://reviews.freebsd.org/D35338



commit da2012af42fb704365cfaff7ae68fc7de59981da
Author: Dimitry Andric <dim@FreeBSD.org>
Date:   Sun Dec 12 21:11:40 2021 +0100

    Revert clang change that breaks CTF on aarch64
    
    Revert commit e655e74a318e from llvm git (by Peter Collingbourne):
    
      AST: Create __va_list in the std namespace even in C.
    
      This ensures that the mangled type names match between C and C++,
      which is significant when using -fsanitize=cfi-icall. Ideally we
      wouldn't have created this namespace at all, but it's now part of
      the ABI (e.g. in mangled names), so we can't change it.
    
      Differential Revision: https://reviews.llvm.org/D104830
    
    As reported by Jessica in https://reviews.llvm.org/D104830#3129527, this
    upstream change is implemented in such a way that it breaks DTrace's
    CTF. Since a proper fix has not yet been forthcoming, and we are
    unaffected by the (CFI-related) problem upstream was trying to address,
    revert the change for now.
    
    Requested by:   jrtc27
    MFC after:      3 days



commit 23c13c7e807ec8abb368e00699a34ffe0bd50885
Author: Alexander <solbjorn@users.noreply.github.com>
Date:   Tue Jul 20 16:03:33 2021 +0200

    A few fixes of callback typecasting (for the upcoming ClangCFI)
    
    * zio: avoid callback typecasting
    * zil: avoid zil_itxg_clean() callback typecasting
    * zpl: decouple zpl_readpage() into two separate callbacks
    * nvpair: explicitly declare callbacks for xdr_array()
    * linux/zfs_nvops: don't use external iput() as a callback
    * zcp_synctask: don't use fnvlist_free() as a callback
    * zvol: don't use ops->zv_free() as a callback for taskq_dispatch()
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Mark Maybee <mark.maybee@delphix.com>
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Closes #12260




commit d26f2a50ff48dacd38ba358d658882d51f7bdbc4
Author: Brandon Bergren <bdragon@FreeBSD.org>
Date:   Sun Feb 7 16:05:41 2021 -0600

    powerpc64: Fix boot on virtual-mode OF (PowerMac G5)
    
    In 78599c32efed3247d165302a1fbe8d9203e38974, CFI endproc decoration was
    added to locore64.S. However, it missed the subtle detail that
    __restartkernel_virtual() falls through to __restartkernel(). This was
    causing boot failure on PowerMac G5, as it tried to execute the
    epilogue as code.
    
    Fix this by branching to __restartkernel() instead of intentionally
    running off the end of the function.
    
    While here, add some additional notes on how the virtual mode restart
    works.
    
    MFC after:      3 days





commit 96d5330da8629566573044b024f2b5deb9a668cd
Author: Dimitry Andric <dim@FreeBSD.org>
Date:   Fri Jan 3 20:19:17 2020 +0000

    ﻿Merge commit c6b09bff5 from llvm git (by Luís Marques):
    
      [RISCV] Fix wrong CFI directives
    
      Summary: Removes CFI CFA directives that could incorrectly propagate
      beyond the basic block they were inteded for. Specifically it removes
      the epilogue CFI directives. See the branch_and_tail_call test for an
      example of the issue. Should fix the stack unwinding issues caused by
      the incorrect directives.
    
      Reviewers: asb, lenary, shiva0217
      Reviewed By: lenary
      Tags: #llvm
      Differential Revision: https://reviews.llvm.org/D69723
    
    This is a prerequisite for building and linking hard- and soft-float
    riscv worlds with clang and lld.
    
    Requested by:   jhb
    MFC after:      1 week
    X-MFC-With:     r353358

commit b75c4efcd2250a6f8974ace98f560ef3a498f625
Author: Andrew Turner <andrew@FreeBSD.org>
Date:   Wed Dec 4 18:40:05 2019 +0000

    Fix the signature for zone_import and zone_release
    
    These are cast to uma_import and uma_release functions. Use the signature
    for these in the zone functions.
    
    This was found with an experimental Kernel CFI. It will complain if the
    signature is different than what a function pointer expects. The
    simplest way to fix these is to correct the signature.
    
    Reviewed by:    rlibby
    Sponsored by:   DARPA, AFRL
    Differential Revision:  https://reviews.freebsd.org/D22671




## control flow integrity
commit 9612674f64cd16c3fe60f72c54acb3a6791c1e5a
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Thu Mar 23 14:35:21 2017 +0000

    In libcasper, prefer to send a function index or service name over the IPC
    channel to a zygote process, rather than sending a function pointer or
    service pointer.  This avoids transfering pointers between address spaces,
    which while robust in this case (due to the zygote being forked() from the
    parent) is not generally a good idea, especially in the presence of
    increasingly popular control-flow integrity and pointer protection
    mitigation schemes.  With this change, ping(8) and other sandboxed tools
    using libcasper for DNS resolution now work on architectures with tagged
    memory again.
    
    Reviewed by:    oshogbo
    MFC after:      1 week
    Sponsored by:   DARPA, AFRL



##



    










    
































